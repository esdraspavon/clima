{"version":3,"sources":["components/Header.js","components/Form.js","components/Error.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","title","Form","cityRef","React","createRef","countryRef","searchWeather","e","preventDefault","response","city","_this","current","value","country","dataConsult","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Error","message","Weather","showResult","_this$props$result","result","name","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","consult","consultApi","_this$state$consult","url","fetch","then","resp","json","datos","setState","catch","console","log","prevProps","prevState","components_Error","components_Weather","components_Header","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1dd8bf6f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = props => {\n  return (\n    <div>\n      <nav>\n        <div className=\"nav-wrapper light-blue darken-2\">\n          <a href=\"/\" className=\"brand-logo\">\n            {props.title}\n          </a>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Form extends Component {\n  //refs\n  cityRef = React.createRef();\n  countryRef = React.createRef();\n\n  searchWeather = e => {\n    e.preventDefault();\n\n    //leer los refs y crear el objeto\n    const response = {\n      city: this.cityRef.current.value,\n      country: this.countryRef.current.value\n    };\n    //Enviarlo por props\n    this.props.dataConsult(response);\n  };\n\n  render() {\n    return (\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <form onSubmit={this.searchWeather}>\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <input id=\"city\" type=\"text\" ref={this.cityRef} />\n                <label htmlFor=\"city\">Ciudad:</label>\n              </div>\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <select id=\"country\" ref={this.countryRef}>\n                  <option value=\"\" defaultValue>\n                    Elige un país\n                  </option>\n                  <option value=\"AR\">Argentina</option>\n                  <option value=\"CO\">Colombia</option>\n                  <option value=\"CR\">Costa Rica</option>\n                  <option value=\"ES\">Espana</option>\n                  <option value=\"US\">Estados Unidos</option>\n                  <option value=\"MX\">Mexico</option>\n                  <option value=\"PE\">Perú</option>\n                </select>\n                <label htmlFor=\"country\">País:</label>\n              </div>\n              <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\n                <input\n                  type=\"submit\"\n                  className=\"waves-effect waves-light btn-large yellow accent-4\"\n                  value=\"Buscar\"\n                />\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nForm.propTypes = {\n  dataConsult: PropTypes.func.isRequired\n};\n\nexport default Form;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Error = props => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col s12 m6 offset-m3\">\n          <div className=\"card-panel red darken-4 error\">{props.message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nError.propTypes = {\n  message: PropTypes.string.isRequired\n};\n\nexport default Error;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Weather extends Component {\n  showResult = () => {\n    //Obtener los datos de la consulta\n    const { name, weather, main } = this.props.result;\n\n    if (!name || !weather || !main) return null;\n\n    const kelvin = 273.15;\n\n    const urlIcon = `https://openweathermap.org/img/w/${weather[0].icon}.png`;\n    const alt = `Clima de ${name}`;\n\n    return (\n      <div className=\"row\">\n        <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n          <div className=\"card-panel light-blue align-center\">\n            <span className=\"white-text\">\n              <h2>{name}</h2>\n              <p className=\"temperatura\">\n                Actual: {(main.temp - kelvin).toFixed(1)}&deg;C\n                <img src={urlIcon} alt={alt} />\n              </p>\n              <p>Max. {(main.temp_max - kelvin).toFixed(1)}&deg;C</p>\n              <p>Min. {(main.temp_min - kelvin).toFixed(1)}&deg;C</p>\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return <div className=\"container\">{this.showResult()}</div>;\n  }\n}\nWeather.propTypes = {\n  result: PropTypes.object.isRequired\n};\n\nexport default Weather;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Error from \"./components/Error\";\nimport Weather from \"./components/Weather\";\n\nclass App extends Component {\n  state = {\n    error: false,\n    consult: {},\n    result: {}\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.consult !== this.state.consult) {\n      this.consultApi();\n    }\n  }\n\n  consultApi = () => {\n    const { city, country } = this.state.consult;\n    if (city === \"\" || country === \"\") return null;\n\n    const appId = \"468a13ac2f9ea871e3995c86fe5e42a0\";\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${appId}`;\n\n    //query con fetch api\n    fetch(url)\n      .then(resp => {\n        return resp.json();\n      })\n      .then(datos => {\n        this.setState({ result: datos });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  dataConsult = resp => {\n    if (resp.city === \"\" || resp.country === \"\") {\n      this.setState({ error: true });\n    } else {\n      this.setState({ consult: resp, error: false });\n    }\n  };\n\n  render() {\n    const error = this.state.error;\n    let result;\n    if (error) {\n      result = <Error message=\"Ambos campos son obligatorios\" />;\n    } else {\n      result = <Weather result={this.state.result} />;\n    }\n\n    return (\n      <div className=\"App\">\n        <Header title=\"Clima React\" />\n        <Form dataConsult={this.dataConsult} />\n        {result}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}